<% query_options = nil unless defined?(query_options) %>
<% query_options ||= {} %>

<%= form_tag({}, :data => {:cm_url => issues_context_menu_path}) do -%>
  <%= hidden_field_tag 'back_url', url_for(:params => request.query_parameters), :id => nil %>
  <%= query_columns_hidden_tags(query) %>
  <div class="autoscroll">
    <table class="list issues odd-even <%= query.css_classes %>">
      <thead>
      <tr>
        <th class="checkbox hide-when-print">
          <%= check_box_tag 'check_all', '', false, :class => 'toggle-selection',
                            :title => "#{l(:button_check_all)}/#{l(:button_uncheck_all)}" %>
        </th>
        <% query.inline_columns.each do |column| %>
          <%= column_header(query, column, query_options) %>
        <% end %>
        <th class="buttons"></th>
      </tr>
      </thead>
      <tbody>
      <%
        def render_issue_with_children(issue, level, query)
          # Render the issue itself
          render_issue(issue, level, query)

          # Render its children
          issue.children.each do |child|
            render_issue_with_children(child, level + 1, query)
          end
        end

        def render_issue(issue, level, query)
      %>
        <tr id="issue-<%= issue.id %>" class="hascontextmenu <%= cycle('odd', 'even') %> <%= issue.css_classes %> <%= level > 0 ? "idnt idnt-#{level}" : nil %>">
          <td class="checkbox hide-when-print"><%= check_box_tag("ids[]", issue.id, false, :id => nil) %></td>
          <% query.inline_columns.each do |column| %>
            <%= content_tag('td', column_content(column, issue), :class => column.css_classes) %>
          <% end %>
          <td class="buttons"><%= link_to_context_menu %></td>
        </tr>
      <%
        end

        # Initially render issues without parents
        issues.select { |i| i.parent_id.nil? }.each do |issue|
          render_issue_with_children(issue, 0, query)
        end
      %>
      </tbody>
    </table>
  </div>
<% end -%>
